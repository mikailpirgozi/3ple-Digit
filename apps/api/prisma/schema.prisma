generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String     @id @default(cuid())
  email           String     @unique
  name            String
  password        String
  role            String     @default("INVESTOR")
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  auditLogs       AuditLog[]
  investorProfile Investor?

  @@map("users")
}

model Investor {
  id        String             @id @default(cuid())
  userId    String             @unique
  name      String
  email     String
  phone     String?
  address   String?
  taxId     String?
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  cashflows InvestorCashflow[]
  snapshots InvestorSnapshot[]
  user      User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("investors")
}

model InvestorCashflow {
  id         String   @id @default(cuid())
  investorId String
  type       String
  amount     Float
  date       DateTime
  note       String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  investor   Investor @relation(fields: [investorId], references: [id], onDelete: Cascade)

  @@map("investor_cashflows")
}

model Asset {
  id            String       @id @default(cuid())
  name          String
  type          String
  category      String?
  description   String?
  currentValue  Float
  status        String       @default("ACTIVE")
  acquiredPrice Float?
  acquiredDate  DateTime?
  salePrice     Float?
  saleDate      DateTime?
  
  // Loan-specific fields
  loanPrincipal    Float?      @map("loan_principal")
  interestRate     Float?      @map("interest_rate")
  interestPeriod   String?     @map("interest_period") // MONTHLY, QUARTERLY, YEARLY, AT_MATURITY
  loanStartDate    DateTime?   @map("loan_start_date")
  loanMaturityDate DateTime?   @map("loan_maturity_date")
  loanStatus       String?     @map("loan_status") // ACTIVE, REPAID, DEFAULTED
  
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  events        AssetEvent[]

  @@index([type, loanStatus], map: "idx_assets_type_loan_status")
  @@map("assets")
}

model AssetEvent {
  id        String   @id @default(cuid())
  assetId   String
  type      String
  amount    Float?
  date      DateTime
  note      String?
  
  // Loan payment tracking fields
  isPaid               Boolean?   @default(true) @map("is_paid")
  paymentDate          DateTime?  @map("payment_date")
  principalAmount      Float?     @map("principal_amount")
  interestAmount       Float?     @map("interest_amount")
  referencePeriodStart DateTime?  @map("reference_period_start")
  referencePeriodEnd   DateTime?  @map("reference_period_end")
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  asset     Asset    @relation(fields: [assetId], references: [id], onDelete: Cascade)

  @@index([assetId, isPaid], map: "idx_asset_events_is_paid")
  @@map("asset_events")
}

model Liability {
  id             String    @id @default(cuid())
  name           String
  description    String?
  currentBalance Float
  interestRate   Float?
  maturityDate   DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@map("liabilities")
}

model BankBalance {
  id          String   @id @default(cuid())
  accountName String
  bankName    String?
  accountType String?
  amount      Float
  currency    String   @default("EUR")
  date        DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("bank_balances")
}

model PeriodSnapshot {
  id                  String             @id @default(cuid())
  date                DateTime
  totalAssetValue     Float
  totalBankBalance    Float
  totalLiabilities    Float
  nav                 Float
  performanceFeeRate  Float?
  totalPerformanceFee Float?
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  investorSnapshots   InvestorSnapshot[]

  @@map("period_snapshots")
}

model InvestorSnapshot {
  id               String         @id @default(cuid())
  snapshotId       String
  investorId       String
  capitalAmount    Float
  ownershipPercent Float
  performanceFee   Float?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  investor         Investor       @relation(fields: [investorId], references: [id], onDelete: Cascade)
  snapshot         PeriodSnapshot @relation(fields: [snapshotId], references: [id], onDelete: Cascade)

  @@unique([snapshotId, investorId])
  @@map("investor_snapshots")
}

model Document {
  id           String   @id @default(cuid())
  name         String
  originalName String
  r2Key        String   @unique
  mimeType     String
  size         Int
  sha256       String?
  category     String?
  description  String?
  linkedType   String?  // 'asset', 'investor', 'liability'
  linkedId     String?  // ID of the linked entity
  uploadedBy   String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("documents")
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  entity    String
  entityId  String
  oldData   String?
  newData   String?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}
